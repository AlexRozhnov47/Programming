// ConsoleApplicatio2.cpp : Этот файл содержит функцию "main". Здесь начинается и заканчивается выполнение программы.
//

#include <iostream>
#include <math.h>
#include <cmath>

using namespace std;

typedef double(*pointFunc)(double);

//double f1(double x) {
 //   return ((x) / ((0.5 * sin(x) + 3 * cos(x)) * (0.5 * sin(x) + 3 * cos(x))));
//}
//double f2(double x) {
//    return ((1) / ((5 - 4 * sin(x)) + x));
//}
//double f3(double x) {
//    return (cos(log(1 / x)) + (1 / (x * x * x)));
//}
double f4(double x) {
    return (x * exp(x)) / ((1 + x) * (1 + x));
}
//double f5(double x) {
//    return (acos(x / 1.2) + 1.44 / (x * x));
//}
double simpson_integral(pointFunc f, double a, double b, int n) {
    const double h = (b - a) / n;
    double k1 = 0, k2 = 0;
    for (int i = 1; i < n; i += 2) {
        k1 += f(a + i * h);
        k2 += f(a + (i + 1) * h);
    }
    return h / 3 * (f(a) + 4 * k1 + 2 * k2);
}
int main() {
    setlocale(LC_ALL, "Russian");
    double a, b, eps;
    double s1,s3,s2,s4,s5,s;
    int n = 1; //начальное число шагов

    cout << "Введите левую границу интегрирования a = " << endl;
    cin >> a;
    cout << "Введите правую границу интегрирования b = " << endl;
    cin >> b;
    cout << "Введите требуемую точность eps = ";
    cin >> eps;
    //s1 = simpson_integral(f1, a, b, n); //первое приближение для интеграла
    //do {
    //    s = s1;     //второе приближение
    //    n = 2 * n;  //увеличение числа шагов в два раза,
                    //т.е. уменьшение значения шага в два раза
    //    s1 = simpson_integral(f1, a, b, n);
    //} while (fabs(s1 - s) > eps);  //сравнение приближений с заданной точностью
    //cout << "\nИнтеграл (5) = " << s1 << endl;
    //s2 = simpson_integral(f2, a, b, n); //первое приближение для интеграла
    //do {
     //   s = s2;     //второе приближение
     //   n = 2 * n;  //увеличение числа шагов в два раза,
    //                //т.е. уменьшение значения шага в два раза
    //    s2 = simpson_integral(f2, a, b, n);
    //} while (fabs(s2 - s) > eps);  //сравнение приближений с заданной точностью
    //cout << "\nИнтеграл (10) = " << s2 << endl;
    //s3 = simpson_integral(f3, a, b, n); //первое приближение для интеграла
   // do {
    //    s = s3;     //второе приближение
    //    n = 2 * n;  //увеличение числа шагов в два раза,
    //                //т.е. уменьшение значения шага в два раза
    //    s3 = simpson_integral(f3, a, b, n);
    //} while (fabs(s3 - s) > eps);  //сравнение приближений с заданной точностью
    //cout << "\nИнтеграл (15) = " << s3 << endl;
    s4 = simpson_integral(f4, a, b, n); //первое приближение для интеграла
    do {
        s = s4;     //второе приближение
        n = 2 * n;  //увеличение числа шагов в два раза,
                    //т.е. уменьшение значения шага в два раза
        s4 = simpson_integral(f4, a, b, n);
    } while (fabs(s4 - s) > eps);  //сравнение приближений с заданной точностью
    cout << "\nИнтеграл (16) = " << s4 << endl;
    //s5 = simpson_integral(f5, a, b, n); //первое приближение для интеграла
    //do {
    //    s = s5;     //второе приближение
     //   n = 2 * n;  //увеличение числа шагов в два раза,
     //               //т.е. уменьшение значения шага в два раза
     //   s5 = simpson_integral(f5, a, b, n);
    //} while (fabs(s5 - s) > eps);  //сравнение приближений с заданной точностью
    ///cout << "\nИнтеграл (20) = " << s5 << endl;
}

// Запуск программы: CTRL+F5 или меню "Отладка" > "Запуск без отладки"
// Отладка программы: F5 или меню "Отладка" > "Запустить отладку"

// Советы по началу работы 
//   1. В окне обозревателя решений можно добавлять файлы и управлять ими.
//   2. В окне Team Explorer можно подключиться к системе управления версиями.
//   3. В окне "Выходные данные" можно просматривать выходные данные сборки и другие сообщения.
//   4. В окне "Список ошибок" можно просматривать ошибки.
//   5. Последовательно выберите пункты меню "Проект" > "Добавить новый элемент", чтобы создать файлы кода, или "Проект" > "Добавить существующий элемент", чтобы добавить в проект существующие файлы кода.
//   6. Чтобы снова открыть этот проект позже, выберите пункты меню "Файл" > "Открыть" > "Проект" и выберите SLN-файл.
